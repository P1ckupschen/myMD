version: "3.8"
services:
  redis: 
    container_name: redis #容器名称
    image: redis:6.2.14 #镜像名称
    restart: always  #重启docker引擎后该容器也重启
    volumes:
        # 虽然挂载的是目录 但是事先有redis.conf的话就是文件挂载过去！！！！
        - /root/compose/redis/conf/redis.conf:/etc/redis/redis.conf
        - /root/compose/redis/data:/data
        - /root/compose/redis/log:/var/log/redis
    ports: 
        - "6379:6379" #本地端口号与容器内部端口号
    command: redis-server /etc/redis/redis.conf #使用command可以覆盖容器启动后默认执行的命令。这里启动执行指定的redis.conf文件 
  mysql: 
    container_name: mysql #容器名称
    image: mysql:8.0.38 #镜像名称
    restart: always  #重启docker引擎后该容器也重启
    ports: 
        - "3306:3306" #本地端口号与容器内部端口号
    volumes: #指定挂载目录
        - /root/compose/mysql/data:/var/lib/mysql
        - /root/compose/mysql/conf:/etc/mysql/my.conf
        - /root/compose/mysql/log:/var/log/mysql
    environment:
      MYSQL_ROOT_PASSWORD: 123456
  nginx: 
    container_name: nginx #容器名称
    image: nginx:1.26.1 #镜像名称
    # restart: always  #重启docker引擎后该容器也重启
    ports: 
        - "80:80" #本地端口号与容器内部端口号
    volumes: #指定挂载目录
        - /root/compose/nginx/conf/nginx.conf:/etc/nginx/nginx.conf
        - /root/compose/nginx/html:/usr/share/nginx/html
        - /root/compose/nginx/log:/var/log/nginx
    # command: nginx -c /etc/nginx/nginx.conf #使用command可以覆盖容器启动后默认执行的命令。这里启动执行指定的nginx.conf文件 
  docker-demo:
    build: .
    container_name: dockerdemo
    ports:
      - "8080:8080"
    volumes:
      - /root/compose/application/logs:/app/logs
    depends_on:
      - mysql
      - redis